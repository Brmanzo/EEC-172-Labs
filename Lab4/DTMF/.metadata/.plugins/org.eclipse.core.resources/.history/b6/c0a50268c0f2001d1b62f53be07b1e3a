#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdint.h>

// Driverlib includes
#include "hw_types.h"
#include "hw_ints.h"
#include "hw_memmap.h"
#include "hw_common_reg.h"
#include "interrupt.h"
#include "hw_apps_rcm.h"
#include "prcm.h"
#include "rom.h"
#include "rom_map.h"
#include "prcm.h"
#include "spi.h"
#include "gpio.h"
#include "systick.h"
#include "utils.h"
#include "timer_if.h"

// Common interface includes
#include "gpio_if.h"
#include "Adafruit_GFX.h"
#include "Adafruit_SSD1351.h"
#include "glcdfont.h"
#include "pin_mux_config.h"


#define APPLICATION_VERSION     "1.4.0"

//*****************************************************************************
//                 GLOBAL VARIABLES -- Start
//*****************************************************************************
#if defined(ccs)
extern void (* const g_pfnVectors[])(void);
#endif
#if defined(ewarm)
extern uVectorEntry __vector_table;
#endif

// some helpful macros for systick

// the cc3200's fixed clock frequency of 80 MHz
// note the use of ULL to indicate an unsigned long long constant
#define SYSCLKFREQ 80000000ULL

// macro to convert ticks to microseconds
#define TICKS_TO_US(ticks) \
    ((((ticks) / SYSCLKFREQ) * 1000000ULL) + \
    ((((ticks) % SYSCLKFREQ) * 1000000ULL) / SYSCLKFREQ))\

// macro to convert microseconds to ticks
#define US_TO_TICKS(us) ((SYSCLKFREQ / 1000000ULL) * (us))

// systick reload value set to 40ms period
// (PERIOD_SEC) * (SYSCLKFREQ) = PERIOD_TICKS
#define SYSTICK_RELOAD_VAL 3200000UL

#define MASTER_MODE      1

#define SPI_IF_BIT_RATE  400000
#define TR_BUFF_SIZE     100

#define BLACK           0x0000
#define BLUE            0x001F
#define GREEN           0x07E0
#define CYAN            0x07FF
#define RED             0xF800
#define MAGENTA         0xF81F
#define YELLOW          0xFFE0
#define WHITE           0xFFFF

long int goertzel (int sample[], long int coeff, int N);
void post_test (void);
int N = 410;                 // block size
volatile int samples[410];   // buffer to store N samples
volatile int count;         // samples count
volatile bool flag;         // flag set when the samples buffer is full with N samples
volatile bool new_dig;      // flag set when inter-digit interval (pause) is detected

int power_all[8];       // array to store calculated power of 8 frequencies

int coeff[8];           // array to store the calculated coefficients
int f_tone[8] = { 697, 770, 852, 941, 1209, 1336, 1477, 1633 }; // frequencies of rows & columns

char ADCRxBuffer[2];


//*****************************************************************************
//                 GLOBAL VARIABLES -- End
//*****************************************************************************


//*****************************************************************************
//                      LOCAL FUNCTION PROTOTYPES                           
//*****************************************************************************
static void BoardInit(void);

//*****************************************************************************
//                      LOCAL FUNCTION DEFINITIONS                         
//*****************************************************************************

static void
BoardInit(void)
{
/* In case of TI-RTOS vector table is initialize by OS itself */
#ifndef USE_TIRTOS
    //
    // Set vector table base
    //
#if defined(ccs)
    MAP_IntVTableBaseSet((unsigned long)&g_pfnVectors[0]);
#endif
#if defined(ewarm)
    MAP_IntVTableBaseSet((unsigned long)&__vector_table);
#endif
#endif
    
    //
    // Enable Processor
    //
    MAP_IntMasterEnable();
    MAP_IntEnable(FAULT_SYSTICK);

    PRCMCC3200MCUInit();
}



//-------Goertzel function---------------------------------------//
long int
goertzel (int sample[], long int coeff, int N)
//---------------------------------------------------------------//
{
//initialize variables to be used in the function
  int Q, Q_prev, Q_prev2, i;
  long prod1, prod2, prod3, power;

  Q_prev = 0;           //set delay element1 Q_prev as zero
  Q_prev2 = 0;          //set delay element2 Q_prev2 as zero
  power = 0;            //set power as zero

  // loop N times and calculate Q, Q_prev, Q_prev2 at each iteration
    for (i = 0; i < N; i++)
    {
        // >>14 used as the coeff was used in Q15 format
        Q = (sample[i]) + ((coeff * Q_prev) >> 14) - (Q_prev2);
        // shuffle delay elements
        Q_prev2 = Q_prev;
        Q_prev = Q;
    }

  //calculate the three products used to calculate power
    prod1 = ((long) Q_prev * Q_prev);
    prod2 = ((long) Q_prev2 * Q_prev2);
    prod3 = ((long) Q_prev * coeff) >> 14;
    prod3 = (prod3 * Q_prev2);

    //calculate power using the three products and scale the result down
    power = ((prod1 + prod2 - prod3)) >> 8;

    return power;
}

//-------Post-test function---------------------------------------//
void
post_test (void)
//---------------------------------------------------------------//
{
    //initialize variables to be used in the function
    int i, row, col, max_power;

    // array with the order of the digits in the DTMF system
    char row_col[4][4] =
    {
        {'1', '2', '3', 'A'},
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    // find the maximum power in the row frequencies and the row number

    max_power = 0;

    //loop 4 times from 0>3 (the indecies of the rows)
    for (i = 0; i < 4; i++)
    {
        //if power of the current row frequency > max_power
        if (power_all[i] > max_power)
        {
            //set max_power as the current row frequency
            max_power = power_all[i];
            //update row number
            row = i;
        }
    }
    // find the maximum power in the column frequencies and the column number
    // initialize max_power=0
    max_power = 0;

    //loop 4 times from 4>7 (the indecies of the columns)
    for (i = 4; i < 8; i++)
    {
        //if power of the current column frequency > max_power
        if (power_all[i] > max_power)
        {
            //set max_power as the current column frequency
            max_power = power_all[i];
            //update column number
            col = i;
        }
    }
    //if the maximum powers equal zero > this means no signal or inter-digit pause
    //set new_dig to 1 to display the next decoded digit
    if (power_all[col] == 0 && power_all[row] == 0)
        new_dig = 1;

    // check if maximum powers of row & column exceed certain threshold AND new_dig flag is set to 1
    if ((power_all[col] > 1000 && power_all[row] > 1000) && (new_dig == 1))
    {
        // display the digit on the LCD
//        write_lcd (1, row_col[row][col - 4]);
//        // display the digit on 7-seg
//        dis_7seg (8, row_col[row][col - 4]);
        // set new_dig to 0 to avoid displaying the same digit again.
        new_dig = 0;
    }
}

static void ADCIntHandler(void){
    unsigned long ulStatus;

    // Set CS Pin Low
    GPIOPinWrite(GPIOA3_BASE, 0x10, 0x00);
    // Receive 2 bytes of sample into Rx Buffer
    MAP_SPITransfer(GSPI_BASE, 0, ADCRxBuffer, 2, SPI_CS_ENABLE|SPI_CS_DISABLE);
    GPIOPinWrite(GPIOA3_BASE, 0x10, 0x10);

    uint16_t SmallEndian = (ADCRxBuffer[1] >> 8)|(ADCRxBuffer[0] << 8);

    if(count < N)
        samples[count] =
        count++;
    if(count == 410)
            disable interipts
}
ISR (ADC_vect)
{
  if (count < N)
    samples[count++] = ADC >> 2;    // scale down ADC reading, store the value in the sampls buffer & increment the count
  else if (count == N)              // if the buffer is full with N samples
    flag = 1;                       // set flag to 1 to start decoding
}

static void SysTickInit(void) {

    // configure the reset value for the systick countdown register
    MAP_SysTickPeriodSet(SYSTICK_RELOAD_VAL);

    // register interrupts on the systick module
    MAP_SysTickIntRegister(SysTickHandler);

    // enable interrupts on systick
    // (trigger SysTickHandler when countdown reaches 0)
    MAP_SysTickIntEnable();

    // enable the systick module itself
    MAP_SysTickEnable();
}
//****************************************************************************
//
//! Main function
//!
//! \param none
//! 
//! This function  
//!    1. Invokes the LEDBlinkyTask
//!
//! \return None.
//
//****************************************************************************
int main()
{
    //
    // Initialize Board configurations
    //
    BoardInit();
    
    //
    // Power on the corresponding GPIO port B for 9,10,11.
    // Set up the GPIO lines to mode 0 (GPIO)
    //
    PinMuxConfig();

    //
    // Enable the SPI module clock
    //
    MAP_PRCMPeripheralClkEnable(PRCM_GSPI,PRCM_RUN_MODE_CLK);

    //
    // Reset the peripheral
    //
    MAP_PRCMPeripheralReset(PRCM_GSPI);

    //
    // Reset SPI
    //
    MAP_SPIReset(GSPI_BASE);

    //
    // Configure SPI interface
    //
    MAP_SPIConfigSetExpClk(GSPI_BASE,MAP_PRCMPeripheralClockGet(PRCM_GSPI),
                     SPI_IF_BIT_RATE,SPI_MODE_MASTER,SPI_SUB_MODE_0,
                     (SPI_SW_CTRL_CS |
                     SPI_4PIN_MODE |
                     SPI_TURBO_OFF |
                     SPI_CS_ACTIVELOW |
                     SPI_WL_8));

    //
    // Enable SPI for communication
    //
    MAP_SPIEnable(GSPI_BASE);

    Adafruit_Init();

    enable interrupts

    start timer
    remember to reset to 0 after 410

    Timer_IF_init(PRCM_TIMERA0, TIMERA0_BASE, TIMER_CFG_PERIODIC, TIMER_A, 0);

    Timer_IF_IntSetup(TIMERA0_BASE, TIMER_A, ADCIntHandler);

    int i;

    // Enable Global Interrupts

    for (i = 0; i < 8; i++)
    {
        coeff[i] = (2 * cos (2 * M_PI * (f_tone[i] / 9615.0))) * (1 << 14);
    }               // calculate coeff at each frquency - Q15 format

    while (1)
    {

        count = 0;        //rest count
        flag = 0;         //reset flag

        while (flag == 0);    // wait till N samples are read in the buffer and the flag set by the ADC ISR
        {
            for (i = 0; i < 8; i++)
                power_all[i] = goertzel(samples, coeff[i], N);   // call goertzel to calculate the power at each frequency and store it in the power_all array
    
            post_test ();       // call post test function to validate the data and display the pressed digit if applicable
        }
    }
    if done? enable interrupts again
}

//-------End of Main--------//
